import database_telegrambot as bd

from aiogram import Router, F
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from aiogram.types import Message,InlineKeyboardButton,ContentType,KeyboardButton,\
    ReplyKeyboardRemove,ReplyKeyboardMarkup,InlineKeyboardMarkup,CallbackQuery,FSInputFile
from aiogram.filters import CommandStart,Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


TOKEN = '7421909036:AAENAJ-e0r57xriyNWi1EPorsZGBd_NQUgE'
dp = Dispatcher()
bot = Bot(token=TOKEN, default=DefaultBotProperties())
router = Router()

class IdeaViewing(StatesGroup):
    offset = State()
    viewing = State()
class IdeaForm(StatesGroup):
    title = State()
    text = State()
    address = State()
    photo = State()
class Form(StatesGroup):
    action = State()
class ChangeIdeaState(StatesGroup):
    title = State()
    text = State()
    adress = State()
    photo = State()

spravka = "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /menu\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å /profile"
@dp.message(CommandStart())
async def start_def(message: Message):
    await message.reply(
        f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üåü
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ "–î–µ–π—Å—Ç–≤—É–π, –≥–æ—Ä–æ–¥!" ‚Äì –≤–∞—à–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –º–∏—Ä–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –Ω–∞—à –≥–æ—Ä–æ–¥ :)''',parse_mode=ParseMode.MARKDOWN 
    )
    
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
        InlineKeyboardButton(text='–ö–æ–Ω–µ—á–Ω–æ —Ö–æ—á—É!', callback_data="now_post"),
        InlineKeyboardButton(text='–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑...', callback_data="other_day"),
    ]])

    await bot.send_message(message.chat.id,
                           '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–∏—Ö –∏–¥–µ—è—Ö, –æ—Å—Ç–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∑–≤–æ–Ω—è—Ç :)',
                           reply_markup=markup)  

#region    
@dp.callback_query(lambda call: call.data.startswith('now_'))
async def callback_create(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    await state.update_data(action=callback_query.data)

    contact_button = KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
    contact_keyboard = ReplyKeyboardMarkup(keyboard=[[contact_button]],
                                           resize_keyboard=True, 
                                           one_time_keyboard=True)

    await bot.send_message(callback_query.from_user.id,
                           '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
                           reply_markup=contact_keyboard)
    
@dp.message(F.contact)
async def contact_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    action = data.get('action')
    
    if action == "now_post":

        user_id = message.from_user.id
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        phone_number = message.contact.phone_number

        bd.post_user(user_id, first_name, last_name, phone_number)
        await message.answer(
            '''–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n'''+spravka,
            reply_markup=ReplyKeyboardRemove()
        )

    elif action == "now_change":
        user_id = message.from_user.id
        phone_number = message.contact.phone_number 

        bd.set_user(user_id, phone_number)
        await message.answer('–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n'+spravka,
                             reply_markup=ReplyKeyboardRemove())
        
    await state.clear()
    
    
@dp.callback_query(lambda call: call.data == 'other_day')
async def callback_create(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    bd.post_user(callback_query.from_user.id, 
                callback_query.from_user.first_name, 
                callback_query.from_user.last_name)
    await bot.send_message(callback_query.message.chat.id, spravka)
#endregion

@dp.message(Command(commands=['help']))
async def help_def(message: Message):
    await bot.send_message(chat_id=message.chat.id, 
                    text=clean_message('''
                    <b>–°–ø—Ä–∞–≤–∫–∞</b>
                    /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    /profile - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    /help - –≤—ã–∑–æ–≤ —Å–ø—Ä–∞–≤–∫–∏
                    /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    '''), 
                    parse_mode=ParseMode.HTML)
    
@dp.message(Command(commands=['profile']))
async def profile_def(message: Message):
    data = bd.get_profile(message.from_user.id)
    if data['phone']==None:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data='now_change'),
                InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω', callback_data='region')
            ],
            [InlineKeyboardButton(text='–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!', callback_data='ideafix_–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!_None_None')]
        ])
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω', callback_data='region')],
            [InlineKeyboardButton(text='–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!', callback_data='ideafix_–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!_None_None')]
        ])
    await bot.send_message(chat_id=message.chat.id,
                           text=clean_message(f'''
                            –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n
                            –ò–º—è: {data['first_name']}
                            –§–∞–º–∏–ª–∏—è: {data['last_name']}
                            –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
                            –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω: {data['region']}
                            '''),
                            reply_markup=markup)

@dp.message(Command(commands=['menu']))
async def menu_def(message: Message):

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å\n–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É', callback_data="create")],
        [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã', callback_data="look_cur")],
        [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', callback_data="look_old")],
        [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã', callback_data="look_my")],
        [InlineKeyboardButton(text='–í—ã–±–µ—Ä–∏\n–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–π–æ–Ω', callback_data="region")]
    ])

    await bot.send_message(chat_id=message.chat.id, 
                           text='–¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –ø–æ –¥—É—à–µ :)', 
                           parse_mode=ParseMode.MARKDOWN,
                           reply_markup=markup)
    
@dp.callback_query(lambda call: call.data == 'create')
async def callback_create(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    await bot.send_message(callback_query.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!')
    await bot.send_message(callback_query.message.chat.id, '–ù–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã:')
    await state.set_state(IdeaForm.title)

#region

@dp.message(IdeaForm.title)
@dp.message(IdeaForm.text)
@dp.message(IdeaForm.address)
@dp.message(IdeaForm.photo)
async def process_idea_info(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == IdeaForm.title:
        await state.update_data(title=message.text)
        await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã:')
        await state.set_state(IdeaForm.text)
    elif current_state == IdeaForm.text:
        await state.update_data(text=message.text)
        await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã:')
        await state.set_state(IdeaForm.address)
    elif current_state == IdeaForm.address:
        await state.update_data(address=message.text)
        await bot.send_message(message.chat.id, '–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ:')
        await state.set_state(IdeaForm.photo)
    elif current_state == IdeaForm.photo:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        full_file_path = f"C://Users//Dasha//Pictures//{photo.file_id}.jpg"

        await bot.download_file(file_path, full_file_path)
        await state.update_data(photo=full_file_path)

        data = await state.get_data()
        bd.post_idea(message.from_user.id, data['title'], data['text'], data['address'], data['photo'])
        await state.clear()

        await bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:)')
        await send_final_message(message.chat.id, message.from_user.id, 'None', 0)
            
async def send_final_message(chat_id: int, user_id: int, view: str, idea_id: int):
    if view == 'None':
        idea_data = bd.last_idea(user_id)
    elif view == 'View':
        idea_data = bd.get_idea(user_id,idea_id)

    title, text, address, first_name, photo_path = (
        idea_data['title'], 
        idea_data['text'], 
        idea_data['adress'], 
        idea_data['first_name'],
        idea_data['photo_prev']
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!', callback_data=f"ideafix_–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!_None_{view}")],
        [
        InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f"ideafix_–ò–∑–º–µ–Ω–∏—Ç—å_{idea_data['idea_id']}_{view}"),
        InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f"ideafix_–£–¥–∞–ª–∏—Ç—å_{idea_data['idea_id']}_{view}")
        ]
    ])
    photo = FSInputFile(photo_path)
    await bot.send_photo(
        chat_id,
        photo=photo,
        caption=f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞: {title}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {text}\n–ê–¥—Ä–µ—Å: {address}\n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {first_name}",
        reply_markup=markup
    )

@dp.callback_query(lambda call: call.data.startswith('ideafix_'))
async def callback_ideafix(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    splited=callback_query.data.split('_')
    but_name=splited[1]
    idea_id=splited[2]
    view=splited[3]
    if but_name=='–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!':
        if view=='None':
            await bot.send_message(callback_query.message.chat.id, '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'+spravka)
        elif view=='View':
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–∞–ª—å—à–µ üëâ', callback_data=f"go_on")],
                [InlineKeyboardButton(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç‚úã', callback_data=f"stop")]
            ])
            await bot.send_message(callback_query.message.chat.id, '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!',reply_markup=markup)

    elif but_name=='–ò–∑–º–µ–Ω–∏—Ç—å':
        markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫', callback_data=f"change_title_{idea_id}_{view}")],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data=f"change_text_{idea_id}_{view}")],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data=f"change_adress_{idea_id}_{view}")],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data=f"change_photo_{idea_id}_{view}")],
        [InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å', callback_data=f"ideafix_–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!_None_{view}")]
        ])
        await bot.send_message(callback_query.message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',reply_markup=markup)
    elif but_name=='–£–¥–∞–ª–∏—Ç—å':
        if view=='None':
            bd.del_idea(idea_id)
            await bot.send_message(callback_query.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É\n\n'+spravka)
        elif view=='View':
            bd.del_idea(idea_id)
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–∞–ª—å—à–µ üëâ', callback_data=f"go_on")],
                [InlineKeyboardButton(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç‚úã', callback_data=f"stop")]
            ])
            await bot.send_message(callback_query.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É',reply_markup=markup)
      
@dp.callback_query(lambda call: call.data.startswith('change_'))
async def callback_change_idea(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    splited=callback_query.data.split('_')
    change_what=splited[1]
    idea_id=splited[2]
    view=splited[3]
    await state.update_data(idea_id=idea_id)
    await state.update_data(view=view)

    if change_what=='title':
        await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:')
        await state.set_state(ChangeIdeaState.title)
    elif change_what=='text':
        await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:')
        await state.set_state(ChangeIdeaState.text)
    elif change_what=='adress':
        await bot.send_message(callback_query.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:')
        await state.set_state(ChangeIdeaState.adress)
    elif change_what=='photo':
        await bot.send_message(callback_query.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:')
        await state.set_state(ChangeIdeaState.photo)

@dp.message(ChangeIdeaState.title)
@dp.message(ChangeIdeaState.text)
@dp.message(ChangeIdeaState.adress)
@dp.message(ChangeIdeaState.photo)
async def process_change(message: Message, state: FSMContext):
    data = await state.get_data()
    idea_id = data['idea_id']
    view = data['view']
    current_state = await state.get_state()

    if current_state == ChangeIdeaState.title.state:
        bd.set_title(idea_id, message.text)
        await message.reply('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.')

        await bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:)')
        await send_final_message(message.chat.id, message.from_user.id,view,idea_id)
        await state.clear()

    elif current_state == ChangeIdeaState.text.state:
        bd.set_text(idea_id, message.text)
        await message.reply('–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.') 

        await bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:)')
        await send_final_message(message.chat.id, message.from_user.id,view,idea_id)
        await state.clear()

    elif current_state == ChangeIdeaState.adress.state:
        bd.set_adress(idea_id, message.text)
        await message.reply('–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω.')

        await bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:)')
        await send_final_message(message.chat.id, message.from_user.id,view,idea_id)
        await state.clear()

    elif current_state == ChangeIdeaState.photo.state and message.photo:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        full_file_path = f"C://Users//Dasha//Pictures//{photo.file_id}.jpg"
        await bot.download_file(file_path, full_file_path)
        bd.set_photo(idea_id, full_file_path)
        await message.reply('–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.')
        
        await bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:)')
        await send_final_message(message.chat.id, message.from_user.id,view,idea_id)
        await state.clear()
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')
    
#endregion

@dp.callback_query(lambda call: call.data == 'look_cur')
async def callback_look_cur(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, '–ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã —É –Ω–∞—Å –µ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è...\n')
    
    await state.set_state(IdeaViewing.viewing)
    await state.update_data(offset=0)
    await send_next_idea(callback_query.message.chat.id, callback_query.from_user.id, state,'new')

@dp.callback_query(lambda call: call.data == 'look_old')
async def callback_look_old(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, '–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø–ª–∞—Ç–∏–ª–∏—Å—å –≤ –∂–∏–∑–Ω—å!')
    
    await state.set_state(IdeaViewing.viewing)
    await state.update_data(offset=0)
    await send_next_idea(callback_query.message.chat.id, callback_query.from_user.id, state, 'old')

#region
async def send_next_idea(chat_id: int, user_id: int, state: FSMContext, what: str):
    state_data = await state.get_data()
    offset = state_data.get('offset', 0)
    
    region = bd.get_region(user_id)
    idea = {}
    if what=='new':
        idea = bd.cur_idea(offset,region['region'])
    elif what=='old':
        idea = bd.cur_idea(offset,region['region'],'released')

    if not idea:
        await bot.send_message(chat_id, "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å :(\n"+spravka)
    else:  
        firstname = bd.get_firstname(idea['idea_id'])  

        if what=='new':
            message_text = clean_message(f"""
            <b>{idea['title']}</b>
            {idea['text']}
            –ê–¥—Ä–µ—Å: {idea['adress']}
            –†–∞–π–æ–Ω: {region['region']}
            –°—Ç–∞—Ç—É—Å: {idea['status']}
            –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {firstname['first_name']}""")

        elif what=='old':
            message_text = clean_message(f"""
            <b>{idea['title']}</b>
            {idea['text']}
            –ê–¥—Ä–µ—Å: {idea['adress']}
            –†–∞–π–æ–Ω: {region['region']}
            –°—Ç–∞—Ç—É—Å: {idea['status']}
            –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {firstname['first_name']}
            –û—Ç–≤–µ—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ: {idea['master']}
            –¢–µ–ª–µ—Ñ–æ–Ω: {idea['contact']}
            """)
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–Ø –∑–∞ üëç', callback_data=f"vote_good_{idea['idea_id']}_{what}")],
            [InlineKeyboardButton(text='–Ø –ø—Ä–æ—Ç–∏–≤ üëé', callback_data=f"vote_bad_{idea['idea_id']}_{what}")],
            [InlineKeyboardButton(text='–ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÇÔ∏è', callback_data=f"vote_pass_{idea['idea_id']}_{what}")],
            [InlineKeyboardButton(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç‚úã', callback_data='stop')]
        ])
        photo = FSInputFile(idea['photo'])
        await bot.send_photo(chat_id, 
                            photo=photo,
                            caption=message_text, 
                            parse_mode=ParseMode.HTML,
                            reply_markup=markup)
    
@dp.callback_query(lambda call: call.data.startswith('vote_'))  
async def handle_stop(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    splited=callback_query.data.split('_')
    idea_choice = splited[1]
    idea_id = splited[2]
    what = splited[3]

    if idea_choice == 'good':
        bd.set_votes('good_reactes',idea_id)
    elif idea_choice == 'bad':
        bd.set_votes('bad_reactes',idea_id)
    else:
        bd.set_votes('pass_reactes',idea_id)

    votes = bd.get_votes(idea_id)

    await bot.send_message(callback_query.message.chat.id,
                           f"–¢–≤–æ–π –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!\n–í–æ—Ç —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: üëç{votes['good_reactes']} üëé{votes['bad_reactes']} ü§∑‚Äç‚ôÄÔ∏è{votes['pass_reactes']}")
    
    state_data = await state.get_data()
    offset = state_data.get('offset', 0)

    await state.update_data(offset = offset + 1)
    await send_next_idea(callback_query.message.chat.id,callback_query.from_user.id, state, what)

@dp.callback_query(lambda call: call.data == 'stop')
async def handle_stop(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await state.clear()
    await bot.send_message(callback_query.message.chat.id, spravka)
    
#endregion
        
@dp.callback_query(lambda call: call.data == 'look_my')
async def callback_look_my(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id, '–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å —Ç–≤–æ–∏–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞–º–∏!')
    
    await state.set_state(IdeaViewing.viewing)
    await state.update_data(offset=0)
    await send_next_myidea(callback_query.message.chat.id, callback_query.from_user.id, state)

#region
async def send_next_myidea(chat_id: int, user_id: int, state: FSMContext):
    state_data = await state.get_data()
    offset = state_data.get('offset', 0)
    
    region = bd.get_region(user_id)
    idea = bd.cur_my_idea(offset,region['region'])
    if not idea:
        await bot.send_message(chat_id, "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å :(\n"+spravka)
    else:  
        message_text = clean_message(f"""
            <b>{idea['title']}</b>
            {idea['text']}
            –ê–¥—Ä–µ—Å: {idea['adress']}
            –†–∞–π–æ–Ω: {region['region']}
            –°—Ç–∞—Ç—É—Å: {idea['status']}
            –û—Ç–≤–µ—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ: {idea['master']}
            –¢–µ–ª–µ—Ñ–æ–Ω: {idea['contact']}
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: üëç{idea['good_reactes']} üëé{idea['bad_reactes']} ü§∑‚Äç‚ôÄÔ∏è{idea['pass_reactes']}
            """)
        if idea['status']=='in processing':
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f"ideafix_–ò–∑–º–µ–Ω–∏—Ç—å_{idea['idea_id']}_View"),
                InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f"ideafix_–£–¥–∞–ª–∏—Ç—å_{idea['idea_id']}_View")
                ],
                [InlineKeyboardButton(text='–î–∞–ª—å—à–µ üëâ', callback_data=f"go_on")],
                [InlineKeyboardButton(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç‚úã', callback_data=f"stop")]
            ])
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–∞–ª—å—à–µ üëâ', callback_data=f"go_on")],
                [InlineKeyboardButton(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç‚úã', callback_data=f"stop")],
            ])
        photo = FSInputFile(idea['photo'])
        await bot.send_photo(chat_id, 
                            photo=photo,
                            caption=message_text, 
                            parse_mode=ParseMode.HTML,
                            reply_markup=markup)
        
@dp.callback_query(lambda call: call.data == 'go_on')  
async def handle_stop(callback_query: CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    state_data = await state.get_data()
    offset = state_data.get('offset', 0)

    await state.update_data(offset = offset + 1)
    await send_next_myidea(callback_query.message.chat.id,callback_query.from_user.id, state)
#endregion

@dp.callback_query(lambda call: call.data == 'region')
async def callback_region(callback_query: CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data="region_–í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π")],
        [InlineKeyboardButton(text='–ê–≤–∏–∞—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω', callback_data="region_–ê–≤–∏–∞—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π")],
        [InlineKeyboardButton(text='–ö–∏—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data="region_–ö–∏—Ä–æ–≤—Å–∫–∏–π")],
        [InlineKeyboardButton(text='–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data="region_–ú–æ—Å–∫–æ–≤—Å–∫–∏–π")],
        [InlineKeyboardButton(text='–ù–æ–≤–æ-–°–∞–≤–∏–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data="region_–ù–æ–≤–æ-–°–∞–≤–∏–Ω–æ–≤—Å–∫–∏–π")],
        [InlineKeyboardButton(text='–°–æ–≤–µ—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data="region_–°–æ–≤–µ—Ç—Å–∫–∏–π")],
        [InlineKeyboardButton(text='–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω', callback_data="region_–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π")],
        [InlineKeyboardButton(text='–í—Å–µ —Ä–∞–π–æ–Ω—ã', callback_data="region_–í—Å–µ —Ä–∞–π–æ–Ω—ã")]
    ])
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.message.chat.id,
                            text=f'''–≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞.\n–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏–ª–∏ –¥–∞–∂–µ –≤—Å–µ–≥–æ –≥–æ—Ä–æ–¥–∞!''',
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=markup)

#region
@dp.callback_query(lambda call: call.data.startswith('region_'))
async def call_back_region(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    region_name=callback_query.data.split('_')[1]
    if region_name=='–í—Å–µ —Ä–∞–π–æ–Ω—ã':
        await bot.send_message(callback_query.message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –≤—Å–µ–º–∏ —Ä–∞–π–æ–Ω–∞–º–∏!')
        bd.set_region(callback_query.from_user.id,str(region_name))
    else:
        await bot.send_message(callback_query.message.chat.id, f'–ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å —Ä–∞–π–æ–Ω–æ–º "{region_name}."')
        bd.set_region(callback_query.from_user.id,str(region_name))
    await bot.send_message(callback_query.message.chat.id, spravka)
#endregion

def clean_message(text):
    lines = [line.strip() for line in text.splitlines() if line.strip()]
    return "\n".join(lines)

if __name__ == "__main__":
    dp.run_polling(bot)
